# Generated by https://jlopp.github.io/bitcoin-core-config-generator/

# This config should be placed in following path:
# %UserProfile%\AppData\Roaming\Bitcoin\bitcoin.conf

# [chain]
# Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter
signet=1
# Run this node on the Bitcoin Test Network. Equivalent to -chain=test
testnet=1
# Blocks must satisfy the given script to be considered valid (only for signet networks)
signetchallenge=Validate
# Use given start/end times for specified version bits deployment. Regtest mode only, in format <deployment:start:end>. Can be set multiple times.
vbparams=<deployment:start:end>
# Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes)
signetseednode=\ sig.net:1234

# [core]
# Enable all compact filters.
blockfilterindex=1
# Only download and relay blocks - ignore unconfirmed transaction
blocksonly=1
# Run in the background as a daemon and accept commands.
daemon=1
# Reindex chain state from the currently indexed blocks. WARNING: very slow!
reindex-chainstate=1
# Create new files with system default permissions. Only effective if wallet is disabled.
sysperms=1
# Maintain a full transaction index, used by the getrawtransaction rpc call.
txindex=1
# Execute command when the best block changes (%s in cmd is replaced by block hash)
blocknotify=%s
# Assume that this block hash and its ancestors are valid. Skip their script verification (performance boost.) Set to 0 to verify all blocks. We recommend leaving value blank.
assumevalid=Daemon\ mode
# Imports blocks from external blk000??.dat file on startup. This option can be set multiple times with different file values.
loadblock=blk000
# Extra transactions to keep in memory for compact block reconstructions.
blockreconstructionextratxn=80
# Execute command on startup.
startupnotify=Execute\ command\ on\ startup

# [debug]
# Append comment to the user agent string.
uacomment=Append\ comment\ to\ the\ user\ agent\ string.
# Disable expensive verification for known chain history.
checkpoints=0
# Stop running after importing blocks from disk.
stopafterblockimport=1
# Log timestamps with microsecond precision.
logtimemicros=1
# Send trace/debug info to console instead of debug.log.
printtoconsole=1
# Set the activation height of segwit. -1 to disable. (regtest-only)
segwitheight=1
# Allows you to test address relay on localhost.
addrmantest=1
# How many recent blocks to check at startup.
checkblocks=10
# How thorough the block verification of -checkblocks is (0-4).
checklevel=4
# Run checks every <n> transactions.
checkmempool=10
# Randomly crash while writing data at a given rate between 0 and 1.
dbcrashratio=0.0005
# Do not accept transactions if number of in-mempool ancestors is <n> or more.
limitancestorcount=40
# Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes.
limitancestorsize=105
# Log IP Addresses in debug output.
logips=1
# Integer representing the script verification flags to enable (all ORed together) - flags can be found in interpreter.h.
promiscuousmempoolflags=Interpreter.h

# [mining]
# Set lowest fee rate (in BTC/kB) for transactions to be included in block creation.
blockmintxfee=0
# Override block version to test forking scenarios.
blockversion=Override

# [network]
# Bind to given address and always listen on it. (default: 0.0.0.0). Use [host]:port notation for IPv6. Append =onion to tag any incoming connections to that address and port as incoming Tor connections
bind=Use\ [host]:port\ notation\ for\ IPv6.
# Connect only to the specified node(s); can be set multiple times. Set to 0 to disable automatic connections.
connect=0
# Specify your own public IP address.
externalip=198.162.1.01
# Always query for peer addresses via DNS lookup.
forcednsseed=1
# Use separate SOCKS5 proxy <ip:port> to reach peers via Tor hidden services.
onion=separate\ SOCKS5\ proxy\ <ip:port>\ 
# Support filtering of blocks and transactions with bloom filters.
peerbloomfilters=1
# Connect through <ip:port> SOCKS5 proxy.
proxy=SOCKS5\ proxy..
# Connect to a node (IP address) to retrieve peer addresses, then disconnect.
seednode=<ip:port>
# Tor control port password.
torpassword=MetaControl)
# Use UPnP to map the listening port.
upnp=1

# [rpc]
# Enable Accounts RPC,Enable Add Witness Address RPC,Enable Validate Address RPC,Enable Sign Raw Transaction RPC
deprecatedrpc=accounts
deprecatedrpc=addwitnessaddress
deprecatedrpc=validateaddress
deprecatedrpc=signrawtransaction

# Accept command line and JSON-RPC commands.
server=1
# Accept public REST requests.
rest=1
# Location of the RPC auth cookie
rpccookiefile=RPC\ auth\ cookie127.0.0.1\ and\ 1\ i.e.,\ localhost
# Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. RPC clients connect using rpcuser=<USERNAME>/rpcpassword=<PASSWORD> arguments. You can generate this value at https://jlopp.github.io/bitcoin-core-rpc-auth-generator/. This option can be specified multiple times.
rpcauth=<USERNAME>:<SALT>$<HASH>
# Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times.
rpcallowip=network/netmask\ (e.g.\ 1.2.3.4/255.255.255.0)\ or\ a\ network/CIDR
# Sets default behavior for rpc whitelisting. Unless rpcwhitelistdefault is set to 0, if any -rpcwhitelist is set, the rpc server acts as if all rpc users are subject to empty-unless-otherwise-specified whitelists. If rpcwhitelistdefault is set to 1 and no -rpcwhitelist is set, rpc server acts as if all rpc users are subject to empty whitelists.
rpcwhitelistdefault=1
# Set a whitelist to filter incoming RPC calls for a specific user. The field <whitelist> comes in the format: <USERNAME>:<rpc 1>,<rpc 2>,...,<rpc n>. If multiple whitelists are set for a given user, they are set-intersected.
rpcwhitelist=<USERNAME>:<rpc\ 1>,<rpc\ 2>,...,<rpc\ n>.

# [wallet]
# Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Improves privacy at expense of higher transaction fees.
avoidpartialspends=1
# Do not load the wallet and disable wallet RPC calls.
disablewallet=1
# A fee rate (in BTC/kB) that will be used when fee estimation has insufficient data
fallbackfee=0.0001
# Specify a custom root certificate to trust for payment requests. Delete value to disable trusting root certificates.
rootcertificates=-ToooHunnid
# Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute and will be created if it does not exist.
wallet=<walletdir>
# Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)
walletnotify=\ (%s\ in\ cmd\ is\ replaced\ by\ TxID)

# [zeromq]
# Enable publishing of block hashes to <address>.
zmqpubhashblock=<address>
# Enable publishing of transaction hashes to <address>.
zmqpubhashtx=<address>
# Enable publishing of raw block hex to <address>.
zmqpubrawblock=<address>
# Enable publishing of raw transaction hex to <address>.
zmqpubrawtx=<address>
# Enable publish hash block and tx sequence in <address>.
zmqpubsequence=<address>


# [Sections]
# Most options automatically apply to mainnet, testnet, and regtest networks.
# If you want to confine an option to just one network, you should add it in the relevant section.
# EXCEPTIONS: The options addnode, connect, port, bind, rpcport, rpcbind and wallet
# only apply to mainnet unless they appear in the appropriate section below.

# Options only for mainnet
[main]

# Options only for testnet
[test]

# Options only for regtest
[regtest]